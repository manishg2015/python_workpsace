{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:38.992661Z",
     "start_time": "2019-08-10T09:29:37.112901Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "colab_type": "code",
    "id": "gnwiOnGyW5JK",
    "outputId": "e4f55f05-280d-4c37-c44c-fa62431964e6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Failed to set locale category LC_NUMERIC to en_IN.\n",
      "Warning: Failed to set locale category LC_TIME to en_IN.\n",
      "Warning: Failed to set locale category LC_COLLATE to en_IN.\n",
      "Warning: Failed to set locale category LC_MONETARY to en_IN.\n",
      "Warning: Failed to set locale category LC_MESSAGES to en_IN.\n",
      "--2019-08-10 14:59:37--  https://storage.googleapis.com/laurencemoroney-blog.appspot.com/bbc-text.csv\n",
      "Resolving storage.googleapis.com (storage.googleapis.com)... 172.217.163.144\n",
      "Connecting to storage.googleapis.com (storage.googleapis.com)|172.217.163.144|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 5057493 (4.8M) [application/octet-stream]\n",
      "Saving to: ‘./bbc-text.csv’\n",
      "\n",
      "./bbc-text.csv      100%[===================>]   4.82M  5.84MB/s    in 0.8s    \n",
      "\n",
      "2019-08-10 14:59:38 (5.84 MB/s) - ‘./bbc-text.csv’ saved [5057493/5057493]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import csv\n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "%config IPCompleter.greedy=True\n",
    "!wget --no-check-certificate \\\n",
    "    https://storage.googleapis.com/laurencemoroney-blog.appspot.com/bbc-text.csv \\\n",
    "    -O ./bbc-text.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:40.181297Z",
     "start_time": "2019-08-10T09:29:40.112680Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "0z-G2B5UUK-5"
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv('bbc-text.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:41.659084Z",
     "start_time": "2019-08-10T09:29:41.650718Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tech</td>\n",
       "      <td>tv future in the hands of viewers with home th...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>business</td>\n",
       "      <td>worldcom boss  left books alone  former worldc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>sport</td>\n",
       "      <td>tigers wary of farrell  gamble  leicester say ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>sport</td>\n",
       "      <td>yeading face newcastle in fa cup premiership s...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>entertainment</td>\n",
       "      <td>ocean s twelve raids box office ocean s twelve...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        category                                               text\n",
       "0           tech  tv future in the hands of viewers with home th...\n",
       "1       business  worldcom boss  left books alone  former worldc...\n",
       "2          sport  tigers wary of farrell  gamble  leicester say ...\n",
       "3          sport  yeading face newcastle in fa cup premiership s...\n",
       "4  entertainment  ocean s twelve raids box office ocean s twelve..."
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:42.430564Z",
     "start_time": "2019-08-10T09:29:42.426111Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2225, 2)"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:43.077662Z",
     "start_time": "2019-08-10T09:29:43.072373Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['tech', 'business', 'sport', 'entertainment', 'politics'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['category'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:44.887048Z",
     "start_time": "2019-08-10T09:29:43.713755Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: nltk in /Users/manishgarg/anaconda3/envs/udacity/lib/python3.7/site-packages (3.4.4)\n",
      "Requirement already satisfied: six in /Users/manishgarg/anaconda3/envs/udacity/lib/python3.7/site-packages (from nltk) (1.12.0)\n"
     ]
    }
   ],
   "source": [
    "! pip install nltk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:45.068254Z",
     "start_time": "2019-08-10T09:29:44.890586Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     /Users/manishgarg/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load library\n",
    "from nltk.corpus import stopwords\n",
    "import nltk\n",
    "nltk.download('stopwords')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**filtering out the stop words**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:46.276122Z",
     "start_time": "2019-08-10T09:29:46.273106Z"
    }
   },
   "outputs": [],
   "source": [
    "# Load stop words\n",
    "stop_words = stopwords.words('english')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:46.774894Z",
     "start_time": "2019-08-10T09:29:46.771746Z"
    }
   },
   "outputs": [],
   "source": [
    "stop_words.append('...')\n",
    "stop_words.append('.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:48.808140Z",
     "start_time": "2019-08-10T09:29:47.289831Z"
    }
   },
   "outputs": [],
   "source": [
    "data['text'] = data['text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop_words)]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:48.813264Z",
     "start_time": "2019-08-10T09:29:48.810280Z"
    }
   },
   "outputs": [],
   "source": [
    "xs = data['text'].values\n",
    "ys = data['category'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:48.823114Z",
     "start_time": "2019-08-10T09:29:48.815567Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(xs, ys,\n",
    "                                                    test_size=0.30,\n",
    "                                                    random_state=101,\n",
    "                                                    stratify=ys)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:49.058948Z",
     "start_time": "2019-08-10T09:29:49.055094Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'lib dems unveil election slogan liberal democrats present real alternative forthcoming general election campaign charles kennedy said. unveiling slogan party spring conference said glass ceiling ambitions. told delegates labour abused public trust tories failed oppose them. response conservatives insisted party understood forgotten majority speaking harrogate mr kennedy said: people want credible principled political party offers different vision britain be. liberal democrats stood iraq war said also provided strong opposition government plans id cards anti-terror measures taxation. said: voted conservative 2001 good vote wasted. people needed party listening concerns; party prepared stand say so; party said prime minister. responding claims tory party co-chairman liam fox said: like labour lib dems soft crime support higher taxes oppose controlled immigration support giving europe control lives. mr kennedy also outlined party plan impose 50% income tax rate earnings £100 000 year. money would used help pay key policies abolishing university tuition fees scrapping council tax favour local income tax providing free care elderly said. labour tories claim sums add working families would hardest hit. mr kennedy said: britain fourth-largest economy world. world class businesses world class workforce. two million pensioners living poverty line parties campaigning hard expected election may although prime minister tony blair confirmed timing. earlier mr kennedy told radio 4 today programme possibility forming coalition labour event hung parliament. go election independent party come independent party said. mr kennedy fire recent days missing monday commons vote government controversial anti-terrorism laws along 16 lib dem mps. saturday lib dem chief executive said cock-up mr kennedy colleagues missed vote government majority 14. nobody idea going happen lord rennard told reporters party conference. said certain mps would get another chance vote plans.'"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**max_length is the maximum length of longest sentence or max words in any sentence**\n",
    "\n",
    "docs = ['Well done!',\n",
    "\t\t'Poor effort!',\n",
    "\t\t'not good',\n",
    "\t\t'poor work',\n",
    "\t\t'Could have done better.']\n",
    "        \n",
    "        \n",
    "[2, 2, 2, 2, 4]\n",
    "\n",
    "\n",
    "max_length: 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:50.744841Z",
     "start_time": "2019-08-10T09:29:50.701741Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max_length 2273\n"
     ]
    }
   ],
   "source": [
    "max_length = max([len(d.split()) for d in xs])\n",
    "print(\"max_length\", max_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:51.787475Z",
     "start_time": "2019-08-10T09:29:51.307542Z"
    }
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "tokenizer = Tokenizer(num_words = max_length, oov_token=\"<OOV>\")\n",
    "tokenizer.fit_on_texts(xs)\n",
    "word_index = tokenizer.word_index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:52.101349Z",
     "start_time": "2019-08-10T09:29:52.098430Z"
    }
   },
   "outputs": [],
   "source": [
    "vocab_size = len(tokenizer.word_index) + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:52.719221Z",
     "start_time": "2019-08-10T09:29:52.715730Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "EYo6A4v5ZABQ"
   },
   "outputs": [],
   "source": [
    "vocab_size = vocab_size\n",
    "embedding_dim = 100 # this is as per your discretion \n",
    "max_length = max_length\n",
    "trunc_type='post'\n",
    "padding_type='post'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "XfdaWh06ZGe3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:54.174915Z",
     "start_time": "2019-08-10T09:29:53.892176Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "ULzA8xhwZI22"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "329\n",
      "2273\n",
      "77\n",
      "2273\n",
      "183\n",
      "2273\n"
     ]
    }
   ],
   "source": [
    "train_sequences = tokenizer.texts_to_sequences(X_train)\n",
    "train_padded = pad_sequences(train_sequences,maxlen=max_length, truncating=trunc_type)\n",
    "\n",
    "\n",
    "\n",
    "print(len(train_sequences[0]))\n",
    "print(len(train_padded[0]))\n",
    "\n",
    "print(len(train_sequences[1]))\n",
    "print(len(train_padded[1]))\n",
    "\n",
    "print(len(train_sequences[10]))\n",
    "print(len(train_padded[10]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:54.510614Z",
     "start_time": "2019-08-10T09:29:54.374718Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "c8PeFWzPZLW_"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "668\n",
      "(668, 2273)\n"
     ]
    }
   ],
   "source": [
    "testing_sequences = tokenizer.texts_to_sequences(X_test)\n",
    "testing_padded = pad_sequences(testing_sequences,maxlen=max_length)\n",
    "\n",
    "print(len(testing_sequences))\n",
    "print(testing_padded.shape)\n",
    "\n",
    "# Expected output\n",
    "# 445\n",
    "# (445, 120)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:55.321083Z",
     "start_time": "2019-08-10T09:29:55.273693Z"
    }
   },
   "outputs": [],
   "source": [
    "label_tokenizer = Tokenizer()\n",
    "label_tokenizer.fit_on_texts(ys)\n",
    "\n",
    "training_label_seq = np.array(label_tokenizer.texts_to_sequences(y_train))\n",
    "test_label_seq = np.array(label_tokenizer.texts_to_sequences(y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:29:56.745135Z",
     "start_time": "2019-08-10T09:29:56.591686Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "HZ5um4MWZP-W"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_4 (Embedding)      (None, 2273, 100)         2970000   \n",
      "_________________________________________________________________\n",
      "global_average_pooling1d_4 ( (None, 100)               0         \n",
      "_________________________________________________________________\n",
      "dense_8 (Dense)              (None, 24)                2424      \n",
      "_________________________________________________________________\n",
      "dense_9 (Dense)              (None, 6)                 150       \n",
      "=================================================================\n",
      "Total params: 2,972,574\n",
      "Trainable params: 2,972,574\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = tf.keras.Sequential()\n",
    "model.add(tf.keras.layers.Embedding(vocab_size,embedding_dim, input_length=max_length))\n",
    "model.add(tf.keras.layers.GlobalAveragePooling1D())\n",
    "model.add(tf.keras.layers.Dense(24, activation='relu'))\n",
    "model.add(tf.keras.layers.Dense(6, activation='softmax'))\n",
    "model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n",
    "model.summary()\n",
    "\n",
    "# Expected Output\n",
    "# Layer (type)                 Output Shape              Param #   \n",
    "# =================================================================\n",
    "# embedding (Embedding)        (None, 120, 16)           16000     \n",
    "# _________________________________________________________________\n",
    "# global_average_pooling1d (Gl (None, 16)                0         \n",
    "# _________________________________________________________________\n",
    "# dense (Dense)                (None, 24)                408       \n",
    "# _________________________________________________________________\n",
    "# dense_1 (Dense)              (None, 6)                 150       \n",
    "# =================================================================\n",
    "# Total params: 16,558\n",
    "# Trainable params: 16,558\n",
    "# Non-trainable params: 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:37:27.712487Z",
     "start_time": "2019-08-10T09:29:57.286621Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "XsfdxySKZSXu"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 1557 samples, validate on 668 samples\n",
      "Epoch 1/30\n",
      " - 12s - loss: 1.7482 - acc: 0.2261 - val_loss: 1.7089 - val_acc: 0.2290\n",
      "Epoch 2/30\n",
      " - 11s - loss: 1.6771 - acc: 0.2293 - val_loss: 1.6463 - val_acc: 0.2290\n",
      "Epoch 3/30\n",
      " - 10s - loss: 1.6297 - acc: 0.2441 - val_loss: 1.6108 - val_acc: 0.2290\n",
      "Epoch 4/30\n",
      " - 10s - loss: 1.6003 - acc: 0.2601 - val_loss: 1.5896 - val_acc: 0.2290\n",
      "Epoch 5/30\n",
      " - 10s - loss: 1.5807 - acc: 0.3269 - val_loss: 1.5710 - val_acc: 0.4581\n",
      "Epoch 6/30\n",
      " - 10s - loss: 1.5582 - acc: 0.4155 - val_loss: 1.5466 - val_acc: 0.4611\n",
      "Epoch 7/30\n",
      " - 11s - loss: 1.5309 - acc: 0.3706 - val_loss: 1.5144 - val_acc: 0.4446\n",
      "Epoch 8/30\n",
      " - 10s - loss: 1.4879 - acc: 0.4753 - val_loss: 1.4647 - val_acc: 0.4880\n",
      "Epoch 9/30\n",
      " - 10s - loss: 1.4233 - acc: 0.4997 - val_loss: 1.3897 - val_acc: 0.5719\n",
      "Epoch 10/30\n",
      " - 10s - loss: 1.3350 - acc: 0.5812 - val_loss: 1.3021 - val_acc: 0.5644\n",
      "Epoch 11/30\n",
      " - 10s - loss: 1.2385 - acc: 0.6551 - val_loss: 1.2083 - val_acc: 0.5449\n",
      "Epoch 12/30\n",
      " - 11s - loss: 1.1346 - acc: 0.6731 - val_loss: 1.1033 - val_acc: 0.8054\n",
      "Epoch 13/30\n",
      " - 11s - loss: 1.0137 - acc: 0.7752 - val_loss: 0.9889 - val_acc: 0.7231\n",
      "Epoch 14/30\n",
      " - 11s - loss: 0.9063 - acc: 0.8292 - val_loss: 0.8783 - val_acc: 0.7829\n",
      "Epoch 15/30\n",
      " - 10s - loss: 0.8020 - acc: 0.8593 - val_loss: 0.7945 - val_acc: 0.8413\n",
      "Epoch 16/30\n",
      " - 133s - loss: 0.7108 - acc: 0.8998 - val_loss: 0.7032 - val_acc: 0.8683\n",
      "Epoch 17/30\n",
      " - 11s - loss: 0.6291 - acc: 0.9107 - val_loss: 0.6295 - val_acc: 0.8862\n",
      "Epoch 18/30\n",
      " - 11s - loss: 0.5568 - acc: 0.9338 - val_loss: 0.5675 - val_acc: 0.9042\n",
      "Epoch 19/30\n",
      " - 11s - loss: 0.4988 - acc: 0.9377 - val_loss: 0.5140 - val_acc: 0.9042\n",
      "Epoch 20/30\n",
      " - 11s - loss: 0.4424 - acc: 0.9480 - val_loss: 0.4723 - val_acc: 0.9042\n",
      "Epoch 21/30\n",
      " - 12s - loss: 0.3965 - acc: 0.9563 - val_loss: 0.4282 - val_acc: 0.9162\n",
      "Epoch 22/30\n",
      " - 12s - loss: 0.3565 - acc: 0.9538 - val_loss: 0.3910 - val_acc: 0.9207\n",
      "Epoch 23/30\n",
      " - 11s - loss: 0.3181 - acc: 0.9679 - val_loss: 0.3605 - val_acc: 0.9416\n",
      "Epoch 24/30\n",
      " - 12s - loss: 0.2908 - acc: 0.9608 - val_loss: 0.3365 - val_acc: 0.9311\n",
      "Epoch 25/30\n",
      " - 11s - loss: 0.2619 - acc: 0.9666 - val_loss: 0.3163 - val_acc: 0.9401\n",
      "Epoch 26/30\n",
      " - 11s - loss: 0.2376 - acc: 0.9737 - val_loss: 0.2870 - val_acc: 0.9386\n",
      "Epoch 27/30\n",
      " - 11s - loss: 0.2196 - acc: 0.9769 - val_loss: 0.2722 - val_acc: 0.9371\n",
      "Epoch 28/30\n",
      " - 11s - loss: 0.1989 - acc: 0.9794 - val_loss: 0.2615 - val_acc: 0.9416\n",
      "Epoch 29/30\n",
      " - 11s - loss: 0.1907 - acc: 0.9769 - val_loss: 0.2400 - val_acc: 0.9446\n",
      "Epoch 30/30\n",
      " - 11s - loss: 0.1682 - acc: 0.9865 - val_loss: 0.2315 - val_acc: 0.9461\n"
     ]
    }
   ],
   "source": [
    "num_epochs = 30\n",
    "history = model.fit(train_padded, training_label_seq, epochs=num_epochs, \n",
    "                    validation_data=(testing_padded, test_label_seq), verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:37:28.189310Z",
     "start_time": "2019-08-10T09:37:27.714829Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "dQ0BX2apXS9u"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "def plot_graphs(history, string):\n",
    "  plt.plot(history.history[string])\n",
    "  plt.plot(history.history['val_'+string])\n",
    "  plt.xlabel(\"Epochs\")\n",
    "  plt.ylabel(string)\n",
    "  plt.legend([string, 'val_'+string])\n",
    "  plt.show()\n",
    "  \n",
    "plot_graphs(history, \"acc\")\n",
    "plot_graphs(history, \"loss\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:37:28.211444Z",
     "start_time": "2019-08-10T09:37:28.191600Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "w7Xc-uWxXhML"
   },
   "outputs": [],
   "source": [
    "reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\n",
    "\n",
    "def decode_sentence(text):\n",
    "    return ' '.join([reverse_word_index.get(i, '?') for i in text])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:37:28.277933Z",
     "start_time": "2019-08-10T09:37:28.213687Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "OhnFA_TDXrih"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(29700, 100)\n"
     ]
    }
   ],
   "source": [
    "e = model.layers[0]\n",
    "weights = e.get_weights()[0]\n",
    "print(weights.shape) # shape: (vocab_size, embedding_dim)\n",
    "\n",
    "# Expected output\n",
    "# (1000, 16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-10T09:37:30.928557Z",
     "start_time": "2019-08-10T09:37:28.279663Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "_POzcWWAXudL"
   },
   "outputs": [],
   "source": [
    "import io\n",
    "\n",
    "out_v = io.open('vecs.tsv', 'w', encoding='utf-8')\n",
    "out_m = io.open('meta.tsv', 'w', encoding='utf-8')\n",
    "for word_num in range(1, vocab_size):\n",
    "  word = reverse_word_index[word_num]\n",
    "  embeddings = weights[word_num]\n",
    "  out_m.write(word + \"\\n\")\n",
    "  out_v.write('\\t'.join([str(x) for x in embeddings]) + \"\\n\")\n",
    "out_v.close()\n",
    "out_m.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "VmqpQMZ_XyOa"
   },
   "outputs": [],
   "source": [
    "try:\n",
    "  from google.colab import files\n",
    "except ImportError:\n",
    "  pass\n",
    "else:\n",
    "  files.download('vecs.tsv')\n",
    "  files.download('meta.tsv')"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "name": "Course 4 - Week 2 - Exercise - Question.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
